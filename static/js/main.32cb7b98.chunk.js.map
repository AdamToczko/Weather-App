{"version":3,"sources":["components/ViewWeather.module.css","components/ViewWeather.js","components/SearchCity.js","components/Clock.js","App.js","serviceWorker.js","index.js","components/SearchCity.module.css"],"names":["module","exports","ViewWeather","props","weather","long","lati","weatherDescription","weatherIcon","temp","pressure","humidity","tempMin","tempMax","windSpeed","clouds","sunrise","sunset","error","city","country","dataNotLoaded","timezone","Sunrise","Date","toLocaleTimeString","Sunset","date","UpperCaseCity","charAt","toUpperCase","slice","console","log","className","styles","errorMessage1","errorMessage2","displayWrapper","displayFont","add","seconds","format","alt","src","image","SearchCity","wrapper","insideWrapper","onSubmit","submit","type","placeholder","value","onChange","change","Clock","state","now","launchClock","clock","setInterval","setState","this","clearInterval","React","Component","App","onInputChange","event","target","handleSubmit","e","preventDefault","axios","get","then","response","data","coord","lon","lat","description","icon","main","temp_min","temp_max","wind","speed","sys","catch","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32cb7b98.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage1\":\"ViewWeather_errorMessage1__2LkYY\",\"errorMessage2\":\"ViewWeather_errorMessage2__3i7s7\",\"displayWrapper\":\"ViewWeather_displayWrapper__3U-7r\",\"displayFont\":\"ViewWeather_displayFont__ni13u\",\"verticalAlign\":\"ViewWeather_verticalAlign__2zFQM\",\"image\":\"ViewWeather_image__2s0hr\"};","import React from \"react\";\nimport Moment from \"react-moment\";\nimport styles from \"./ViewWeather.module.css\";\n\nfunction ViewWeather(props) {\n    const {\n        long,\n        lati,\n        weatherDescription,\n        weatherIcon,\n        temp,\n        pressure,\n        humidity,\n        tempMin,\n        tempMax,\n        windSpeed,\n        clouds,\n        sunrise,\n        sunset,\n        error,\n        city,\n        country,\n        dataNotLoaded,\n        timezone,\n    } = props.weather;\n\n    let Sunrise = new Date(sunrise * 1000).toLocaleTimeString();\n    let Sunset = new Date(sunset * 1000).toLocaleTimeString();\n\n    let date = new Date();\n\n    let UpperCaseCity = `${city}`.charAt(0).toUpperCase() + `${city}`.slice(1);\n    console.log(UpperCaseCity);\n\n    if (dataNotLoaded && !error) {\n        return <div></div>;\n    } else if (error) {\n        return (\n            <span className={styles.errorMessage1}>\n                Please try different city as{\" \"}\n                <span className={styles.errorMessage2}>{city}</span> is not in\n                our database{\" \"}\n            </span>\n        );\n    } else {\n        return (\n            <div className={styles.displayWrapper}>\n                <div className=\"col-12 col-sm-12\">\n                    Searched City date & time{\" \"}\n                    <span className={styles.displayFont}>\n                        {\n                            <Moment\n                                add={{ seconds: timezone - 3600 }}\n                                format=\"YYYY-MM-DD hh:mm:ss\"\n                            >\n                                {date}\n                            </Moment>\n                        }\n                    </span>\n                </div>\n\n                <div className=\"w-100 d-none d-md-block\"></div>\n                <div className=\"row verticalAlign\">\n                    <div className=\"col-6 col-sm-4\">\n                        City:{\" \"}\n                        <span className={styles.displayFont}>\n                            {UpperCaseCity}\n                        </span>\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Country:{\" \"}\n                        <span className={styles.displayFont}>{country}</span>{\" \"}\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Description:{\" \"}\n                        <span className={styles.displayFont}>\n                            {weatherDescription}\n                        </span>\n                    </div>\n                    <div className=\"w-100 d-none d-md-block\"></div>\n                    <div className=\"col-6 col-sm-4\">\n                        longitude:{\" \"}\n                        <span className={styles.displayFont}>{long}</span>\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        latitude:{\" \"}\n                        <span className={styles.displayFont}>{lati}</span>\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Wind:{\" \"}\n                        <span className={styles.displayFont}>{windSpeed}</span>{\" \"}\n                        m/s\n                    </div>\n                    <div className=\"w-100 d-none d-md-block\"></div>\n                    <div className=\"col-6 col-sm-4\">\n                        Current temp:{\" \"}\n                        <span className={styles.displayFont}>{temp} </span>°C\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Min temp:{\" \"}\n                        <span className={styles.displayFont}>{tempMin}</span> °C\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Max temp:{\" \"}\n                        <span className={styles.displayFont}>{tempMax}</span> °C\n                    </div>\n                    <div className=\"w-100 d-none d-md-block\"></div>\n                    <div className=\"col-6 col-sm-4\">\n                        Clouds:{\" \"}\n                        <span className={styles.displayFont}>{clouds}</span>\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Pressure:{\" \"}\n                        <span className={styles.displayFont}>{pressure} </span>\n                        hpa\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Humidity:{\" \"}\n                        <span className={styles.displayFont}>{humidity}</span> %\n                    </div>\n                    <div className=\"w-100 d-none d-md-block\"></div>\n\n                    <div className=\"col-6 col-sm-4\">\n                        Sunrise:{\" \"}\n                        <span className={styles.displayFont}>{Sunrise}</span>\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        Sunset:{\" \"}\n                        <span className={styles.displayFont}>{Sunset}</span>\n                    </div>\n                    <div className=\"col-6 col-sm-4\">\n                        {\" \"}\n                        <img\n                            alt=\"weatherIcon\"\n                            src={`http://openweathermap.org/img/wn/${weatherIcon}@2x.png`}\n                            className={styles.image}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ViewWeather;\n","import React from \"react\";\nimport styles from \"./SearchCity.module.css\";\n\nfunction SearchCity(props) {\n    return (\n        <div className={styles.wrapper}>\n            <form className={styles.insideWrapper} onSubmit={props.submit}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Type in city name\"\n                    value={props.value}\n                    onChange={props.change}\n                />\n                <button type=\"submit\" className=\"btn btn-primary\">\n                    Download weather\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchCity;\n","import React from \"react\";\n\nclass Clock extends React.Component {\n  state = {\n    now: new Date().toLocaleTimeString()\n  };\n\n  componentDidMount() {\n    this.launchClock();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.clock);\n  }\n\n  launchClock = () => {\n    this.clock = setInterval(() => {\n      this.setState({\n        now: new Date().toLocaleTimeString()\n      });\n    }, 1000);\n  };\n\n  render() {\n    return <h4>{this.state.now}</h4>;\n  \n  }\n}\n\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport ViewWeather from './components/ViewWeather';\nimport SearchCity from './components/SearchCity';\nimport Clock from './components/Clock'\n\n\nclass App extends React.Component {\n  \n  state = {\n    value:'',\n    long: '',\n    lati: '',\n    weatherDescription: '',\n    weatherIcon: '',\n    temp: '',\n    pressure: '',\n    humidity: '',\n    tempMin: '',\n    tempMax: '',\n    windSpeed: '',\n    clouds: '',\n    sunrise: '',\n    sunset: '',\n    error: false,\n    country: '',\n    dataNotLoaded: true,\n    timezone: '',\n    }\n\n    onInputChange =(event) => {\n      const {value} = event.target\n      this.setState({value: value})\n  }\n\n    handleSubmit = e => {\n\t\te.preventDefault();\n\n      axios\n        .get(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&units=metric&appid=05508bb378ad891b493b0c886cca7a57`)\n        .then((response) => {\n          return response.data})\n          .then(data => {\n            this.setState(state => ({\n              dataNotLoaded: false,\n                error: false,\n                city: state.value,\n                long: data.coord.lon,\n                lati: data.coord.lat,\n                weatherDescription: data.weather[0].description,\n                weatherIcon:data.weather[0].icon,\n                temp: data.main.temp,\n                pressure: data.main.pressure,\n                humidity: data.main.humidity,\n                tempMin: data.main.temp_min,\n                tempMax: data.main.temp_max,\n                windSpeed: data.wind.speed,\n                clouds: data.weather[0].main,\n                sunrise: data.sys.sunrise,\n                sunset: data.sys.sunset,\n                country: data.sys.country,\n                timezone: data.timezone,\n                value:\"\"\n            }))\n          })\n        .catch(error => { console.log(error)\n              this.setState(prevState => ({\n                error: true,\n                city: prevState.value\n              })) \n        })\n    }\n  \n  render() {\n    \n  return (\n    \n    <div className=\"App\">\n      <div className=\"AppShadow\">\n\n        <div className=\"AppHeader\">\n        <h3>Your current time:</h3>\n        <Clock />\n        <SearchCity \n        value={this.state.value}\n        change={this.onInputChange}\n        submit={this.handleSubmit}\n        />\n        </div>\n      <div className=\"AppFooter\">\n      \n      <ViewWeather \n      weather={this.state}\n      />\n      </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchCity_wrapper__ndSg1\",\"insideWrapper\":\"SearchCity_insideWrapper__3Ri9n\"};"],"sourceRoot":""}