{"version":3,"sources":["components/ViewWeather.module.css","components/ViewWeather.js","components/SearchCity.js","components/Clock.js","App.js","serviceWorker.js","index.js","components/SearchCity.module.css"],"names":["module","exports","ViewWeather","props","weather","long","lati","weatherDescription","weatherIcon","temp","pressure","humidity","tempMin","tempMax","windSpeed","clouds","sunrise","sunset","error","city","country","dataNotLoaded","timezone","Sunrise","Date","toLocaleTimeString","Sunset","date","className","styles","errorMessage1","errorMessage2","displayWrapper","displayFont","add","seconds","format","src","SearchCity","console","log","wrapper","insideWrapper","onSubmit","submit","type","placeholder","value","onChange","change","Clock","state","now","launchClock","clock","setInterval","setState","this","clearInterval","React","Component","App","onInputChange","event","target","handleSubmit","e","preventDefault","axios","get","then","response","data","coord","lon","lat","description","icon","main","temp_min","temp_max","wind","speed","sys","catch","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf4840c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage1\":\"ViewWeather_errorMessage1__2LkYY\",\"errorMessage2\":\"ViewWeather_errorMessage2__3i7s7\",\"displayWrapper\":\"ViewWeather_displayWrapper__3U-7r\",\"displayFont\":\"ViewWeather_displayFont__ni13u\"};","import React from 'react';\nimport Moment from 'react-moment';\nimport styles from \"./ViewWeather.module.css\";\n\nfunction ViewWeather (props) {\n      const {long, lati, weatherDescription, weatherIcon, temp, pressure, humidity,\n    tempMin, tempMax, windSpeed, clouds, sunrise, sunset,\n    error, city, country, dataNotLoaded, timezone} = props.weather\n    \n    let Sunrise = new Date(sunrise*1000).toLocaleTimeString();\n    let Sunset = new Date(sunset*1000).toLocaleTimeString();\n    \n    let date = new Date();\n\n    if (dataNotLoaded && !error) {\n      return (\n        <div></div>\n      )\n      } else if (error){\n        return (<span className={styles.errorMessage1}>Please try different city as <span className={styles.errorMessage2}>{city}</span> is not in our database </span>)\n      } else {\n          return (\n          \n            <div className={styles.displayWrapper} >\n            <div className=\"col-12 col-sm-12\">Searched City date & time <span className={styles.displayFont} >\n              {<Moment add={{ seconds: timezone -3600}}\n              format='YYYY-MM-DD hh:mm:ss'\n              >{date}</Moment>} </span> </div>\n           \n            <div className=\"w-100 d-none d-md-block\"></div>\n            <div className=\"row\">\n            <div className=\"col-6 col-sm-4\">City: <span className={styles.displayFont} >{city}</span> </div>\n            <div className=\"col-6 col-sm-4\">Country: <span className={styles.displayFont} >{country}</span> </div>\n            <div className=\"col-6 col-sm-4\">Description: <span className={styles.displayFont} >{weatherDescription}</span> </div>\n            <div className=\"w-100 d-none d-md-block\"></div>\n            <div className=\"col-6 col-sm-4\">longitude: <span className={styles.displayFont} >{long}</span> </div>\n            <div className=\"col-6 col-sm-4\">latitude: <span className={styles.displayFont} >{lati}</span> </div>\n            <div className=\"col-6 col-sm-4\">Wind: <span className={styles.displayFont} >{windSpeed}</span> m/s</div>\n            <div className=\"w-100 d-none d-md-block\"></div>\n            <div className=\"col-6 col-sm-4\">Temperature now: <span className={styles.displayFont} >{temp} </span>°C</div>\n            <div className=\"col-6 col-sm-4\">Min temp: <span className={styles.displayFont} >{tempMin}</span> °C</div>\n            <div className=\"col-6 col-sm-4\">Max temp: <span className={styles.displayFont} >{tempMax}</span> °C</div>\n            <div className=\"w-100 d-none d-md-block\"></div>\n            <div className=\"col-6 col-sm-4\">Clouds: <span className={styles.displayFont} >{clouds}</span> </div>\n            <div className=\"col-6 col-sm-4\">Pressure: <span className={styles.displayFont} >{pressure} </span>hpa</div>\n            <div className=\"col-6 col-sm-4\">Humidity: <span className={styles.displayFont} >{humidity}</span> %</div>\n            <div className=\"w-100 d-none d-md-block\"></div>\n            \n            <div className=\"col-6 col-sm-4\">Sunrise: <span className={styles.displayFont} >{Sunrise}</span></div>\n            <div className=\"col-6 col-sm-4\">Sunset: <span className={styles.displayFont} >{Sunset}</span></div>\n            <div className=\"col-6 col-sm-4\"> <img src={`http://openweathermap.org/img/wn/${weatherIcon}@2x.png`}/></div>\n            </div> \n             </div>\n          ) }\n\n}\n  \n  \nexport default ViewWeather;\n  ","import React from 'react';\nimport styles from \"./SearchCity.module.css\";\n\nfunction SearchCity (props) {\n   console.log(props)\n    return (\n        <div className={styles.wrapper}>\n        <form className={styles.insideWrapper} onSubmit={props.submit}>\n        <input type='text' placeholder='Type in city name' value={props.value} onChange={props.change} />\n        <button type=\"submit\" className=\"btn btn-primary\">Download weather</button>\n        </form>\n      </div>\n    )\n    }\n\n    export default SearchCity;","import React from \"react\";\n\nclass Clock extends React.Component {\n  state = {\n    now: new Date().toLocaleTimeString()\n  };\n\n  componentDidMount() {\n    this.launchClock();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.clock);\n  }\n\n  launchClock = () => {\n    this.clock = setInterval(() => {\n      this.setState({\n        now: new Date().toLocaleTimeString()\n      });\n    }, 1000);\n  };\n\n  render() {\n    return <h4>{this.state.now}</h4>;\n  \n  }\n}\n\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport ViewWeather from './components/ViewWeather';\nimport SearchCity from './components/SearchCity';\nimport Clock from './components/Clock'\n\n\nclass App extends React.Component {\n  \n  state = {\n    value:'',\n    long: '',\n    lati: '',\n    weatherDescription: '',\n    weatherIcon: '',\n    temp: '',\n    pressure: '',\n    humidity: '',\n    tempMin: '',\n    tempMax: '',\n    windSpeed: '',\n    clouds: '',\n    sunrise: '',\n    sunset: '',\n    error: false,\n    country: '',\n    dataNotLoaded: true,\n    timezone: '',\n    }\n\n    onInputChange =(event) => {\n      const {value} = event.target\n      this.setState({value: value})\n  }\n\n    handleSubmit = e => {\n\t\te.preventDefault();\n\n      axios\n        .get(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&units=metric&appid=05508bb378ad891b493b0c886cca7a57`)\n        .then((response) => {\n          return response.data})\n          .then(data => {\n            this.setState(state => ({\n              dataNotLoaded: false,\n                error: false,\n                city: state.value,\n                long: data.coord.lon,\n                lati: data.coord.lat,\n                weatherDescription: data.weather[0].description,\n                weatherIcon:data.weather[0].icon,\n                temp: data.main.temp,\n                pressure: data.main.pressure,\n                humidity: data.main.humidity,\n                tempMin: data.main.temp_min,\n                tempMax: data.main.temp_max,\n                windSpeed: data.wind.speed,\n                clouds: data.weather[0].main,\n                sunrise: data.sys.sunrise,\n                sunset: data.sys.sunset,\n                country: data.sys.country,\n                timezone: data.timezone,\n                value:\"\"\n            }))\n          })\n        .catch(error => { console.log(error)\n              this.setState(prevState => ({\n                error: true,\n                city: prevState.value\n              })) \n        })\n    }\n  \n  render() {\n    \n  return (\n    \n    <div className=\"App\">\n      <div className=\"AppShadow\">\n\n        <div className=\"AppHeader\">\n        <h3>Your current time:</h3>\n        <Clock />\n        <SearchCity \n        value={this.state.value}\n        change={this.onInputChange}\n        submit={this.handleSubmit}\n        />\n        </div>\n      <div className=\"AppFooter\">\n      \n      <ViewWeather \n      weather={this.state}\n      />\n      </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchCity_wrapper__ndSg1\",\"insideWrapper\":\"SearchCity_insideWrapper__3Ri9n\"};"],"sourceRoot":""}